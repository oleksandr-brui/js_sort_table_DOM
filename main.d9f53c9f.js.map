{"version":3,"sources":["scripts/main.js"],"names":["currentTable","document","querySelector","sortFunction","table","column","tBody","tBodies","rowsOftBody","querySelectorAll","sortLetter","sortNum","nameSort","sort","a","b","aTextContent","cells","textContent","trim","bTextContent","parseFloat","replace","firstChild","removeChild","append","addEventListener","e","sortValue","indexCellTarget","item","target","closest","contains","i","length","innerText"],"mappings":";AAAA,aAyCA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EArCA,IAAMA,EAAeC,SAASC,cAAc,SAEtCC,EAAe,SAACC,EAAOC,GA0BpBC,IAzBDA,IAAAA,EAAQF,EAAMG,QAAQ,GACtBC,EAAcF,EAAMG,iBAAiB,MAErCC,EAAwB,IAAXL,GAA2B,IAAXA,EAC7BM,EAAqB,IAAXN,GAA2B,IAAXA,EAE1BO,EAAW,EAAIJ,GAClBK,KAAK,SAACC,EAAGC,GACFC,IAAAA,EAAeF,EAAEG,MAAMZ,GAAQa,YAAYC,OAC3CC,EAAeL,EAAEE,MAAMZ,GAAQa,YAAYC,OAE7CT,OAAAA,EACKM,EAAeI,EAAe,GAAK,EAGxCT,EACWU,WAAWL,EAAaM,QAAQ,QAAS,KACzCD,WAAWD,EAAaE,QAAQ,QAAS,UAFpDX,IAUDL,EAAMiB,YACXjB,EAAMkB,YAAYlB,EAAMiB,YAI1BjB,EAAMmB,OAANnB,MAAAA,EAAgBM,EAAAA,KAIlBZ,EAAa0B,iBAAiB,QAAS,SAACC,GAEhCC,IAEFC,EAFED,EAAY,CAAC,OAAQ,WAAY,MAAO,UACxCE,EAAOH,EAAEI,OAAOC,QAAQ,MAG1B,GAACF,GAASA,EAAKG,SAASH,GAAxB,CAIC,IAAA,IAAII,EAAI,EAAGA,EAAIN,EAAUO,OAAQD,IAChCJ,EAAKM,YAAcR,EAAUM,KAC/BL,EAAkBK,GAItB/B,EAAaH,EAAc6B","file":"main.d9f53c9f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// write code here\n\nconst currentTable = document.querySelector('table');\n\nconst sortFunction = (table, column) => {\n  const tBody = table.tBodies[0];\n  const rowsOftBody = tBody.querySelectorAll('tr');\n\n  const sortLetter = column === 0 || column === 1;\n  const sortNum = column === 2 || column === 3;\n  // name and position sort{\n  const nameSort = [...rowsOftBody]\n    .sort((a, b) => {\n      const aTextContent = a.cells[column].textContent.trim();\n      const bTextContent = b.cells[column].textContent.trim();\n\n      if (sortLetter) {\n        return aTextContent > bTextContent ? 1 : -1;\n      }\n\n      if (sortNum) {\n        const aNum = parseFloat(aTextContent.replace(/[$,]/g, ''));\n        const bNum = parseFloat(bTextContent.replace(/[$,]/g, ''));\n\n        return aNum - bNum;\n      }\n    });\n  // age and salary sort\n\n  // remove all rows from tBody\n  while (tBody.firstChild) {\n    tBody.removeChild(tBody.firstChild);\n  };\n\n  // Add the sorted rows\n  tBody.append(...nameSort);\n};\n\n// click on table headers\ncurrentTable.addEventListener('click', (e) => {\n  // naming headers\n  const sortValue = ['Name', 'Position', 'Age', 'Salary'];\n  const item = e.target.closest('th');\n  let indexCellTarget;\n\n  if (!item || !item.contains(item)) {\n    return;\n  }\n\n  for (let i = 0; i < sortValue.length; i++) {\n    if (item.innerText === sortValue[i]) {\n      indexCellTarget = i;\n    }\n  }\n\n  sortFunction(currentTable, indexCellTarget);\n});\n"]}